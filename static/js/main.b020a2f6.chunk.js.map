{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["payWithMetamask","receiver","strEther","a","provider","ethers","providers","Web3Provider","window","ethereum","signer","getSigner","getAddress","userAddress","params","from","to","value","send","useStyles","makeStyles","theme","root","minWidth","bullet","display","margin","transform","title","fontSize","fontWeight","gameInfo","padding","pos","marginBottom","spacing","extendedIcon","marginRight","paper","width","height","avatar","color","palette","getContrastText","backgroundColor","winner","props","win","diceAddress","EthLogo","classes","className","Card","CardContent","Typography","gutterBottom","balance","gamesPlayed","Fab","size","aria-label","icon","ethereumIcon","Button","onClick","variant","total","winners","lossers","data","chartData","valueField","argumentField","visible","App","useState","setGamesPlayed","setWinners","setLossers","setBalance","setChartData","setWin","setTotal","fetchGamesPlayed","contract","Contract","Dice","abi","totalGamesPlayed","totalWinners","totalLossers","parseInt","console","log","useEffect","request","method","played","getBalance","wei","utils","formatUnits","group","on","sender","event","confirm","requestAccount","alert","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4TAgBMA,EAAe,uCAAG,WAAOC,EAAUC,GAAjB,qBAAAC,EAAA,6DAChBC,EAAW,IAAIC,IAAOC,UAAUC,aAAaC,OAAOC,UAClDC,EAASN,EAASO,YAFJ,SAGMD,EAAOE,aAHb,cAGdC,EAHc,OAIdC,EAAS,CACX,CACIC,KAAMF,EACNG,GAAIf,EACJgB,MAAO,mBARK,SAYUb,EAASc,KAAK,sBAAuBJ,GAZ/C,yDAAH,wDAgBfK,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACFC,SAAU,KAEdC,OAAQ,CACJC,QAAS,eACTC,OAAQ,QACRC,UAAW,cAEfC,MAAO,CACHC,SAAU,GACVC,WAAY,QAEhBC,SAAU,CACNF,SAAU,GACVG,QAAS,MACTF,WAAY,QAEhBG,IAAK,CACDC,aAAc,IAElBR,OAAQ,CACJA,OAAQL,EAAMc,QAAQ,IAE1BC,aAAc,CACVC,YAAahB,EAAMc,QAAQ,IAE/BG,MAAO,CACHZ,OAAQ,SACRa,MAAOlB,EAAMc,QAAQ,IACrBK,OAAQ,SAEZC,OAAQ,CACJf,OAAQL,EAAMc,QAAQ,GACtBO,MAAOrB,EAAMsB,QAAQC,gBAAgB,WACrCC,gBAAiB,WAErBC,OAAQ,CACJpB,OAAQL,EAAMc,QAAQ,GACtBO,MAAO,SAAAK,GAAK,OAAIA,EAAMC,IAAM3B,EAAMsB,QAAQC,gBAAgB,WAAavB,EAAMsB,QAAQC,gBAAgB,YACrGC,gBAAiB,SAAAE,GAAK,OAAIA,EAAMC,IAAM,UAAY,gBAKpDC,EAAc,6CAEdC,EAAU,SAACH,GACb,IAAMI,EAAUhC,EAAU4B,GAC1B,OACI,sBAAKK,UAAU,eAAf,UACI,cAACC,EAAA,EAAD,CAAMD,UAAWD,EAAQ7B,KAAzB,SACI,eAACgC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAYH,UAAWD,EAAQvB,MAAOc,MAAM,gBAAgBc,cAAY,EAAxE,0BAGA,eAACD,EAAA,EAAD,CAAYH,UAAWD,EAAQvB,MAAOc,MAAM,gBAAgBc,cAAY,EAAxE,mCAC2BT,EAAMU,WAEjC,eAACF,EAAA,EAAD,CAAYH,UAAWD,EAAQvB,MAAOc,MAAM,gBAAgBc,cAAY,EAAxE,iCACST,EAAMW,eAE3B,cAACC,EAAA,EAAD,CAAKC,KAAK,QAAQR,UAAWD,EAAQL,OAAQe,aAAW,MAAxD,SACgB,cAAC,OAAD,CAAMC,KAAMC,IAAcvB,OAAQ,QAEtC,cAACwB,EAAA,EAAD,CAAQC,QAAS,kBAAIjE,EAAgBiD,EAAa,MAAMW,KAAK,QAAQM,QAAQ,YAAYxB,MAAM,UAA/F,SACX,cAEW,cAACa,EAAA,EAAD,CAAYH,UAAWD,EAAQvB,MAAOc,MAAM,gBAAgBc,cAAY,EAAxE,SAERT,EAAMC,IAAN,mBAAwBD,EAAMoB,MAA9B,kCAGQ,eAACZ,EAAA,EAAD,CAAYH,UAAWD,EAAQvB,MAAOc,MAAM,gBAAgBc,cAAY,EAAxE,4BACIT,EAAMqB,WAEV,eAACb,EAAA,EAAD,CAAYH,UAAWD,EAAQvB,MAAOc,MAAM,gBAAgBc,cAAY,EAAxE,4BACIT,EAAMsB,gBAIlB,qBAAKjB,UAAW,GAAhB,SACQ,eAAC,IAAD,CAAOkB,KAAMvB,EAAMwB,UAAnB,UACI,cAAC,IAAD,CAAWC,WAAW,QAAQC,cAAc,UAC5C,cAAC,IAAD,CAChBC,SAAS,aAiGFC,MAzFf,WACI,MAAsCC,qBAAtC,mBAAOlB,EAAP,KAAoBmB,EAApB,KACA,EAA8BD,qBAA9B,mBAAOR,EAAP,KAAgBU,EAAhB,KACA,EAA8BF,qBAA9B,mBAAOP,EAAP,KAAgBU,EAAhB,KACA,EAA8BH,qBAA9B,mBAAOnB,EAAP,KAAgBuB,EAAhB,KACA,EAAkCJ,mBAAS,IAA3C,mBAAOL,EAAP,KAAkBU,EAAlB,KACA,EAAsBL,oBAAS,GAA/B,mBAAO5B,EAAP,KAAYkC,EAAZ,KACA,EAA0BN,mBAAS,GAAnC,mBAAOT,EAAP,KAAcgB,EAAd,KACA,EAAwBP,oBAAS,GAAjC,mBARW,SA+DIQ,IA/DJ,2EA+DX,oCAAAjF,EAAA,yDACmC,qBAApBK,OAAOC,SADtB,wBAEcL,EAAW,IAAIC,IAAOC,UAAUC,aAAaC,OAAOC,UACpD4E,EAAW,IAAIhF,IAAOiF,SAASrC,EAAasC,EAAKC,IAAKpF,GAHpE,kBAKsCiF,EAASI,mBAL/C,cAKkB/B,EALlB,gBAMkC2B,EAASK,eAN3C,cAMkBtB,EANlB,iBAOkCiB,EAASM,eAP3C,eAOkBtB,EAPlB,yBAQmB,CACHX,YAAakC,SAASlC,GACtBU,QAASwB,SAASxB,GAClBC,QAASuB,SAASvB,KAXlC,kCAcYwB,QAAQC,IAAI,UAAZ,MAdZ,2DA/DW,sBAkFX,OA1EA,UAWAC,qBAAU,WAAM,4CACZ,kCAAA5F,EAAA,sEACUK,OAAOC,SAASuF,QAAQ,CAAEC,OAAQ,wBAD5C,cAEU7F,EAAW,IAAIC,IAAOC,UAAUC,aAAaC,OAAOC,UAF9D,SAGyB2E,IAHzB,cAGUc,EAHV,gBAIsB9F,EAAS+F,WAAWlD,GAJ1C,OAIUmD,EAJV,OAKU3C,EAAUpD,IAAOgG,MAAMC,YAAY,GAAKV,SAASQ,GAAM,IAC7DpB,EAAWvB,GACXoB,EAAeqB,EAAOxC,aACtBoB,EAAWoB,EAAO9B,SAClBW,EAAWmB,EAAO7B,SAClBY,EAAa,CACT,CAAEsB,MAAO,UAAWpC,MAAO+B,EAAO7B,SAClC,CAAEkC,MAAO,UAAWpC,MAAO+B,EAAO9B,WAGrB,IAAI/D,IAAOiF,SAASrC,EAAasC,EAAKC,IAAKpF,GACnDoG,GAAG,WAAZ,uCAAwB,WAAOC,EAAQC,EAAO5D,GAAtB,mBAAA3C,EAAA,6DACpB+E,EAAOpC,GACPqC,EAAS9E,IAAOgG,MAAMC,YAAY,GAAKV,SAASc,GAAQ,KAFpC,SAGHtB,IAHG,cAGlBc,EAHkB,gBAIN9F,EAAS+F,WAAWlD,GAJd,OAIlBmD,EAJkB,OAKlB3C,EAAUpD,IAAOgG,MAAMC,YAAY,GAAKV,SAASQ,GAAM,IAC7DpB,EAAWvB,GACXoB,EAAeqB,EAAOxC,aACtBoB,EAAWoB,EAAO9B,SAClBW,EAAWmB,EAAO7B,SAClBY,EAAa,CACT,CAAEsB,MAAO,UAAWpC,MAAO+B,EAAO7B,SAClC,CAAEkC,MAAO,UAAWpC,MAAO+B,EAAO9B,WAZd,4CAAxB,2DAhBJ,6CADY,sBAiCmB,qBAApB5D,OAAOC,WACAD,OAAOmG,QAAQ,kCAlCpB,WAAD,wBAqCJC,GAEAC,MAAM,wCAGf,IAsBC,qBAAKzD,UAAU,MAAf,SACI,cAAC,EAAD,CAASe,MAAOA,EAAOnB,IAAKA,EAAKoB,QAASA,EAASC,QAASA,EAASX,YAAaA,EAAaa,UAAWA,EAAWd,QAASA,OCrM3HqD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.b020a2f6.chunk.js","sourcesContent":["import \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport { Icon } from \"@iconify/react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport { Chart, PieSeries, Legend } from \"@devexpress/dx-react-chart-material-ui\";\nimport Fab from \"@material-ui/core/Fab\";\nimport ethereumIcon from \"@iconify-icons/mdi/ethereum\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Dice from \"./artifacts/contracts/ButerinDice.sol/ButerinDice.json\";\n\n\nconst log = (w) => alert(\"LOG: \" + JSON.stringify(w));\nconst payWithMetamask = async (receiver, strEther) => {\n    let provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner()\n    const userAddress = await signer.getAddress()\n    const params = [\n        {\n            from: userAddress,\n            to: receiver,\n            value: \"10000000000000\"\n            //value: ethers.utils.formatEther(strEther)\n        },\n    ];\n    const transactionHash = await provider.send(\"eth_sendTransaction\", params);\n\n};\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        minWidth: 275,\n    },\n    bullet: {\n        display: \"inline-block\",\n        margin: \"0 2px\",\n        transform: \"scale(0.8)\",\n    },\n    title: {\n        fontSize: 14,\n        fontWeight: \"bold\",\n    },\n    gameInfo: {\n        fontSize: 16,\n        padding: \"1em\",\n        fontWeight: \"bold\",\n    },\n    pos: {\n        marginBottom: 12,\n    },\n    margin: {\n        margin: theme.spacing(1),\n    },\n    extendedIcon: {\n        marginRight: theme.spacing(1),\n    },\n    paper: {\n        margin: \"0 auto\",\n        width: theme.spacing(32),\n        height: \"300px\",\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        color: theme.palette.getContrastText(\"#00ab12\"),\n        backgroundColor: \"#00ab12\",\n    },\n    winner: {\n        margin: theme.spacing(1),\n        color: props => props.win ? theme.palette.getContrastText(\"#00ab12\") : theme.palette.getContrastText(\"#ff0000\"),\n        backgroundColor: props => props.win ? \"#00ab12\" : \"#ff0000\",\n    },\n}));\n//import Token from './artifacts/contracts/Token.sol/Token.json'\n//const tokenAddress = \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\"\nconst diceAddress = \"0xe7C4724c7C4a8E9206920ee2aD765e5c93C28F5B\";\n\nconst EthLogo = (props) => {\n    const classes = useStyles(props);\n    return (\n        <div className=\"logo-wrapper\">\n            <Card className={classes.root}>\n                <CardContent>\n                    <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                        Buterin Dice\n                    </Typography>\n                    <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                        Contract ETH Balance: {props.balance}\n                    </Typography>\n                    <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n        Total games played: {props.gamesPlayed}\n                    </Typography>\n        <Fab size=\"large\" className={classes.winner} aria-label=\"add\">\n                        <Icon icon={ethereumIcon} height={120} />\n                    </Fab>\n                    <Button onClick={()=>payWithMetamask(diceAddress, \"1\")} size=\"large\" variant=\"contained\" color=\"primary\">\n        {\"Play Game\"}\n                    </Button>\n                    <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n        {\n            props.win ? `You won: ${props.total} ETH`: `You lost ðŸ˜”`\n        }\n                    </Typography>\n                    <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n        Total winners: {props.winners}\n                    </Typography>\n                    <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n        Total lossers: {props.lossers}\n                    </Typography>\n                </CardContent>\n            </Card>\n            <div className={\"\"}>\n                    <Chart data={props.chartData}>\n                        <PieSeries valueField=\"total\" argumentField=\"group\" />\n                        <Legend\n        visible={true} />\n                    </Chart>\n            </div>\n        </div>\n    );\n};\n\n\nfunction App() {\n    const [gamesPlayed, setGamesPlayed] = useState();\n    const [winners, setWinners] = useState();\n    const [lossers, setLossers] = useState();\n    const [balance, setBalance] = useState();\n    const [chartData, setChartData] = useState([]);\n    const [win, setWin] = useState(true)\n    const [total, setTotal] = useState(0)\n    const [open, setOpen] = useState(false);\n\n    const handleClickOpen = () => {\n            setOpen(true);\n\n    };\n\n    const handleClose = () => {\n            setOpen(false);\n    };\n\n    useEffect(() => {\n        async function requestAccount() {\n            await window.ethereum.request({ method: \"eth_requestAccounts\" });\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\n            const played = await fetchGamesPlayed();\n            const wei = await provider.getBalance(diceAddress);\n            const balance = ethers.utils.formatUnits(\"\" + parseInt(wei), 18);\n            setBalance(balance);\n            setGamesPlayed(played.gamesPlayed);\n            setWinners(played.winners);\n            setLossers(played.lossers);\n            setChartData([\n                { group: \"lossers\", total: played.lossers },\n                { group: \"winners\", total: played.winners },\n            ]);\n\n            const contract = new ethers.Contract(diceAddress, Dice.abi, provider);\n            contract.on(\"GameOver\", async (sender, event, winner)=>{\n                setWin(winner)\n                setTotal(ethers.utils.formatUnits(\"\" + parseInt(event), 18))\n            const played = await fetchGamesPlayed();\n            const wei = await provider.getBalance(diceAddress);\n            const balance = ethers.utils.formatUnits(\"\" + parseInt(wei), 18);\n            setBalance(balance);\n            setGamesPlayed(played.gamesPlayed);\n            setWinners(played.winners);\n            setLossers(played.lossers);\n            setChartData([\n                { group: \"lossers\", total: played.lossers },\n                { group: \"winners\", total: played.winners },\n            ]);\n            })\n        }\n        if (typeof window.ethereum !== \"undefined\") {\n            const agree = window.confirm(\"WARNING: PLAY AT YOUR OWN RISK\");\n\n            if (agree) {\n                requestAccount();\n            } else {\n                alert(\"Thanks for visiting! ðŸ‘‹\");\n            }\n        }\n    }, []);\n\n    async function fetchGamesPlayed() {\n        if (typeof window.ethereum !== \"undefined\") {\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\n            const contract = new ethers.Contract(diceAddress, Dice.abi, provider);\n            try {\n                const gamesPlayed = await contract.totalGamesPlayed();\n                const winners = await contract.totalWinners();\n                const lossers = await contract.totalLossers();\n                return {\n                    gamesPlayed: parseInt(gamesPlayed),\n                    winners: parseInt(winners),\n                    lossers: parseInt(lossers),\n                };\n            } catch (err) {\n                console.log(\"Error: \", err);\n            }\n        }\n    }\n\n    return (\n        <div className=\"App\">\n            <EthLogo total={total} win={win} winners={winners} lossers={lossers} gamesPlayed={gamesPlayed} chartData={chartData} balance={balance} />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}