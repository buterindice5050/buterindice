{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["PrettoSlider","withStyles","root","color","height","marginTop","width","thumb","backgroundColor","border","marginLeft","boxShadow","active","valueLabel","left","track","borderRadius","rail","Slider","useStyles","makeStyles","theme","minWidth","bullet","display","margin","transform","title","fontSize","fontWeight","gameInfo","padding","pos","marginBottom","spacing","extendedIcon","marginRight","paper","avatar","palette","getContrastText","winner","props","win","bet","textAlign","diceAddress","EthLogo","classes","className","Card","CardContent","Typography","gutterBottom","balance","gamesPlayed","Fab","size","aria-label","icon","ethereumIcon","Button","disabled","onClick","payWithMetamask","variant","TextField","id","InputProps","input","startAdornment","InputAdornment","position","style","onChange","e","setBet","target","value","label","min","max","total","winners","losers","data","chartData","valueField","argumentField","visible","App","useState","setGamesPlayed","setWinners","setlosers","setBalance","setChartData","setWin","setMax","setTotal","a","provider","ethers","providers","Web3Provider","window","ethereum","signer","getSigner","getAddress","userAddress","params","from","to","utils","parseUnits","String","toHexString","send","fetchGamesPlayed","contract","Contract","Dice","abi","totalGamesPlayed","totalWinners","totalLosers","console","log","useEffect","request","method","played","getBalance","wei","parseInt","group","on","sender","event","formatUnits","confirm","requestAccount","alert","newValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6cfb020a.chunk.js","sourcesContent":["import \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport Web3 from \"web3\";\nimport { ethers } from \"ethers\";\nimport { Icon } from \"@iconify/react\";\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport { Chart, PieSeries, Legend } from \"@devexpress/dx-react-chart-material-ui\";\nimport Fab from \"@material-ui/core/Fab\";\nimport ethereumIcon from \"@iconify-icons/mdi/ethereum\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Slider from \"@material-ui/core/Slider\";\nimport Dice from \"./artifacts/contracts/ButerinDice.sol/ButerinDice.json\";\n\nconst log = (w) => alert(\"LOG: \" + JSON.stringify(w));\nconst PrettoSlider = withStyles({\n    root: {\n        color: \"#52af77\",\n        height: 12,\n        marginTop: 12,\n        width: \"80%\",\n    },\n    thumb: {\n        height: 44,\n        width: 44,\n        backgroundColor: \"#fff\",\n        border: \"2px solid currentColor\",\n        marginTop: -14,\n        marginLeft: -12,\n        \"&:focus, &:hover, &$active\": {\n            boxShadow: \"inherit\",\n        },\n    },\n    active: {},\n    valueLabel: {\n        left: \"calc(-50% + 4px)\",\n    },\n    track: {\n        height: 16,\n        borderRadius: 4,\n    },\n    rail: {\n        height: 16,\n        borderRadius: 4,\n    },\n})(Slider);\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        minWidth: 275,\n    },\n    bullet: {\n        display: \"inline-block\",\n        margin: \"0 2px\",\n        transform: \"scale(0.8)\",\n    },\n    title: {\n        fontSize: 14,\n        fontWeight: \"bold\",\n    },\n    gameInfo: {\n        fontSize: 16,\n        padding: \"1em\",\n        fontWeight: \"bold\",\n    },\n    pos: {\n        marginBottom: 12,\n    },\n    margin: {\n        margin: theme.spacing(2),\n    },\n    extendedIcon: {\n        marginRight: theme.spacing(1),\n    },\n    paper: {\n        margin: \"0 auto\",\n        width: theme.spacing(32),\n        height: \"300px\",\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        color: theme.palette.getContrastText(\"#00ab12\"),\n        backgroundColor: \"#00ab12\",\n    },\n    winner: {\n        margin: theme.spacing(1),\n        color: (props) => (props.win ? theme.palette.getContrastText(\"#00ab12\") : theme.palette.getContrastText(\"#ff0000\")),\n        backgroundColor: (props) => (props.win ? \"#00ab12\" : \"#ff0000\"),\n    },\n    bet: {\n        textAlign: \"center\",\n        fontSize: 22,\n        fontWeight: \"bold\",\n    },\n}));\n//import Token from './artifacts/contracts/Token.sol/Token.json'\n//const tokenAddress = \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\"\nconst diceAddress = \"0x7887FF89405FA50c481baeb82fE6C216BB4e7D1F\";\n\nconst weiToEth = (wei) => Web3.utils.fromWei(String(wei), \"ether\");\n\nconst EthLogo = (props) => {\n    const classes = useStyles(props);\n    return (\n        <div className=\"logo-wrapper\">\n            <Card className={classes.root}>\n                <CardContent>\n                    <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                        Buterin Dice\n                    </Typography>\n                    <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                        Contract ETH Balance: {props.balance}\n                    </Typography>\n                    <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                        Current MAX Bet: {props.balance / 5}\n                    </Typography>\n                    <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                        Total games played: {props.gamesPlayed}\n                    </Typography>\n                    <Fab size=\"large\" className={classes.winner} aria-label=\"add\">\n                        <Icon icon={ethereumIcon} height={120} />\n                    </Fab>\n                    <Button disabled={props.bet > props.balance / 5} onClick={() => props.payWithMetamask()} size=\"large\" variant=\"contained\" color=\"primary\">\n                        {\"Play Game\"}\n                    </Button>\n                    <TextField\n                        id=\"outlined-basic\"\n                        className={classes.margin}\n                        InputProps={{\n                            classes: {\n                                input: classes.bet,\n                            },\n                            startAdornment: (\n                                <InputAdornment position=\"start\">\n                                    {props.bet <= props.balance / 20 && <span style={{ fontSize: \"38px\" }}>😐</span>}\n                                    {props.bet > props.balance / 20 && props.bet <= props.balance / 10 && <span style={{ fontSize: \"38px\" }}>😀</span>}\n                                    {props.bet > props.balance / 10 && props.bet != props.balance / 5 && <span style={{ fontSize: \"38px\" }}>🤑</span>}\n                                    {props.bet == props.balance / 5 && <span style={{ fontSize: \"38px\" }}>🤯</span>}\n                                </InputAdornment>\n                            ),\n                        }}\n                        onChange={(e) => props.setBet(e, e.target.value)}\n                        value={props.bet}\n                        label=\"Place your bet\"\n                        variant=\"outlined\"\n                    />\n                    <PrettoSlider onChange={props.setBet} value={props.bet} min={props.min} max={props.max} />\n\n                    <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                        {props.win ? `You won: ${props.total} ETH` : `You lost 😔 ${props.total} ETH`}\n                    </Typography>\n                    <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                        Total winners: {props.winners}\n                    </Typography>\n                    <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                        Total losers: {props.losers}\n                    </Typography>\n                </CardContent>\n            </Card>\n            <div className={\"\"}>\n                <Chart data={props.chartData}>\n                    <PieSeries valueField=\"total\" argumentField=\"group\" />\n                    <Legend visible={true} />\n                </Chart>\n            </div>\n        </div>\n    );\n};\n\nfunction App() {\n    const [gamesPlayed, setGamesPlayed] = useState();\n    const [winners, setWinners] = useState();\n    const [losers, setlosers] = useState();\n    const [balance, setBalance] = useState(0);\n    const [chartData, setChartData] = useState([]);\n    const [win, setWin] = useState(true);\n    const [min, setMin] = useState(0);\n    const [max, setMax] = useState(10);\n    const [total, setTotal] = useState(0);\n    const [bet, setBet] = useState(0);\n\n    const payWithMetamask = async () => {\n        let provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const userAddress = await signer.getAddress();\n        const params = [\n            {\n                from: userAddress,\n                to: diceAddress,\n                value: ethers.utils.parseUnits(String(bet), \"wei\").toHexString(),\n            },\n        ];\n        const transactionHash = await provider.send(\"eth_sendTransaction\", params);\n    };\n\n    const handleChange = (event, newValue) => {\n        setBet(newValue);\n    };\n\n    useEffect(() => {\n        async function requestAccount() {\n            await window.ethereum.request({ method: \"eth_requestAccounts\" });\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\n            const played = await fetchGamesPlayed();\n            const wei = await provider.getBalance(diceAddress);\n            setBalance(wei);\n            setMax(wei * 0.2)\n            setGamesPlayed(parseInt(played.gamesPlayed));\n            setWinners(parseInt(played.winners));\n            setlosers(parseInt(played.losers));\n            setChartData([\n                { group: \"losers\", total: played.losers },\n                { group: \"winners\", total: played.winners },\n            ]);\n\n            const contract = new ethers.Contract(diceAddress, Dice.abi, provider);\n            contract.on(\"GameOver\", async (sender, event, winner) => {\n                setWin(winner);\n                setTotal(ethers.utils.formatUnits(\"\" + event, 18));\n                const played = await fetchGamesPlayed();\n                const wei = await provider.getBalance(diceAddress);\n                setBalance(wei);\n                setMax(wei * 0.2)\n                setGamesPlayed(parseInt(played.gamesPlayed));\n                setWinners(parseInt(played.winners));\n                setlosers(parseInt(played.losers));\n                setChartData([\n                    { group: \"losers\", total: played.losers },\n                    { group: \"winners\", total: played.winners },\n                ]);\n            });\n        }\n        if (typeof window.ethereum !== \"undefined\") {\n            const agree = window.confirm(\"WARNING: PLAY AT YOUR OWN RISK\");\n\n            if (agree) {\n                requestAccount();\n            } else {\n                alert(\"Thanks for visiting! 👋\");\n            }\n        }\n    }, []);\n\n    async function fetchGamesPlayed() {\n        if (typeof window.ethereum !== \"undefined\") {\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\n            const contract = new ethers.Contract(diceAddress, Dice.abi, provider);\n            try {\n                const gamesPlayed = await contract.totalGamesPlayed();\n                const winners = await contract.totalWinners();\n                const losers = await contract.totalLosers();\n                return {\n                    gamesPlayed: gamesPlayed,\n                    winners: winners,\n                    losers: losers,\n                };\n            } catch (err) {\n                console.log(\"Error: \", err);\n            }\n        }\n    }\n\n    return (\n        <div className=\"App\">\n            <EthLogo total={total} win={win} setBet={handleChange} bet={bet} min={min} max={max} winners={winners} losers={losers} gamesPlayed={gamesPlayed} chartData={chartData} payWithMetamask={payWithMetamask} balance={parseInt(balance)} />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}