{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["payWithMetamask","receiver","strEther","a","provider","ethers","providers","Web3Provider","window","ethereum","signer","getSigner","getAddress","userAddress","params","from","to","value","send","useStyles","makeStyles","theme","root","minWidth","bullet","display","margin","transform","title","fontSize","gameInfo","padding","fontWeight","pos","marginBottom","spacing","center","width","border","palette","divider","borderRadius","shape","backgroundColor","background","paper","color","text","secondary","extendedIcon","marginRight","height","avatar","getContrastText","diceAddress","EthLogo","props","classes","className","Card","CardContent","Typography","gutterBottom","balance","gamesPlayed","Fab","size","aria-label","icon","ethereumIcon","Button","onClick","variant","winners","lossers","data","chartData","valueField","argumentField","visible","App","useState","setGamesPlayed","setWinners","setLossers","setBalance","setChartData","fetchGamesPlayed","contract","Contract","Dice","abi","totalGamesPlayed","totalWinners","totalLossers","parseInt","console","log","useEffect","request","method","played","getBalance","wei","utils","formatUnits","group","total","confirm","requestAccount","alert","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.78fe8c41.chunk.js","sourcesContent":["import \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport { Icon } from \"@iconify/react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport { Chart, PieSeries, Legend } from \"@devexpress/dx-react-chart-material-ui\";\nimport Fab from \"@material-ui/core/Fab\";\nimport ethereumIcon from \"@iconify-icons/mdi/ethereum\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Dice from \"./artifacts/contracts/ButerinDice.sol/ButerinDice.json\";\n\nconst log = (w) => alert(\"LOG: \" + JSON.stringify(w));\nconst payWithMetamask = async (receiver, strEther) => {\n    let provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner()\n    const userAddress = await signer.getAddress()\n    const params = [\n        {\n            from: userAddress,\n            to: receiver,\n            value: \"10000000000000\"\n            //value: ethers.utils.formatEther(strEther)\n        },\n    ];\n    const transactionHash = await provider.send(\"eth_sendTransaction\", params);\n\n};\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        minWidth: 275,\n    },\n    bullet: {\n        display: \"inline-block\",\n        margin: \"0 2px\",\n        transform: \"scale(0.8)\",\n    },\n    title: {\n        fontSize: 14,\n    },\n    gameInfo: {\n        fontSize: 16,\n        padding: \"1em\",\n        fontWeight: \"bold\",\n    },\n    pos: {\n        marginBottom: 12,\n    },\n    margin: {\n        margin: theme.spacing(1),\n    },\n    center: {\n        margin: \"0 auto\",\n        width: \"fit-content\",\n        border: `1px solid ${theme.palette.divider}`,\n        borderRadius: theme.shape.borderRadius,\n        backgroundColor: theme.palette.background.paper,\n        color: theme.palette.text.secondary,\n    },\n    extendedIcon: {\n        marginRight: theme.spacing(1),\n    },\n    paper: {\n        margin: \"0 auto\",\n        width: theme.spacing(32),\n        height: \"300px\",\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        color: theme.palette.getContrastText(\"#00ab12\"),\n        backgroundColor: \"#00ab12\",\n    },\n}));\n//import Token from './artifacts/contracts/Token.sol/Token.json'\n//const tokenAddress = \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\"\nconst diceAddress = \"0x219Ba62a7Db5F9d50cd92FAc2B7D018C1FD6895B\";\n\nconst EthLogo = (props) => {\n    const classes = useStyles();\n    return (\n        <div className=\"logo-wrapper\">\n            <Card className={classes.root}>\n                <CardContent>\n                    <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                        Buterin Dice\n                    </Typography>\n                    <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                        Contract ETH Balance: {props.balance}\n                    </Typography>\n                    <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n        Total games played: {props.gamesPlayed}\n                    </Typography>\n                    <Fab size=\"large\" color=\"primary\" aria-label=\"add\">\n                        <Icon icon={ethereumIcon} height={120} />\n                    </Fab>\n                    <Button onClick={()=>payWithMetamask(diceAddress, \"1\")} variant=\"contained\" size=\"large\" color=\"primary\" className={classes.margin}>\n                        Play Game\n                    </Button>\n                    <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n        Total winners: {props.winners}\n                    </Typography>\n                    <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n        Total lossers: {props.lossers}\n                    </Typography>\n                </CardContent>\n            </Card>\n            <div className={\"\"}>\n                    <Chart data={props.chartData}>\n                        <PieSeries valueField=\"total\" argumentField=\"group\" />\n                        <Legend\n        visible={true} />\n                    </Chart>\n            </div>\n        </div>\n    );\n};\n\n\nfunction App() {\n    const [gamesPlayed, setGamesPlayed] = useState();\n    const [winners, setWinners] = useState();\n    const [lossers, setLossers] = useState();\n    const [balance, setBalance] = useState();\n    const [chartData, setChartData] = useState([]);\n\n    useEffect(() => {\n        async function requestAccount() {\n            await window.ethereum.request({ method: \"eth_requestAccounts\" });\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\n            const played = await fetchGamesPlayed();\n            const wei = await provider.getBalance(diceAddress);\n            const balance = ethers.utils.formatUnits(\"\" + parseInt(wei), 18);\n            setBalance(balance);\n            setGamesPlayed(played.gamesPlayed);\n            setWinners(played.winners);\n            setLossers(played.lossers);\n            setChartData([\n                { group: \"lossers\", total: played.lossers },\n                { group: \"winners\", total: played.winners },\n            ]);\n        }\n        if (typeof window.ethereum !== \"undefined\") {\n            const agree = window.confirm(\"WARNING: PLAY AT YOUR OWN RISK\");\n\n            if (agree) {\n                requestAccount();\n            } else {\n                alert(\"Thanks for visiting! 👋\");\n            }\n        }\n    }, []);\n\n    async function fetchGamesPlayed() {\n        if (typeof window.ethereum !== \"undefined\") {\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\n            const contract = new ethers.Contract(diceAddress, Dice.abi, provider);\n            try {\n                const gamesPlayed = await contract.totalGamesPlayed();\n                const winners = await contract.totalWinners();\n                const lossers = await contract.totalLossers();\n                return {\n                    gamesPlayed: parseInt(gamesPlayed),\n                    winners: parseInt(winners),\n                    lossers: parseInt(lossers),\n                };\n            } catch (err) {\n                console.log(\"Error: \", err);\n            }\n        }\n    }\n\n    /* async function setGreeting() {\n            if (!greeting) return\n        if (typeof window.ethereum !== 'undefined') {\n                  await requestAccount()\n                  const provider = new ethers.providers.Web3Provider(window.ethereum);\n                  console.log({ provider  })\n                  const signer = provider.getSigner()\n                  const contract = new ethers.Contract(greeterAddress, Greeter.abi, signer)\n                  const transaction = await contract.setGreeting(greeting)\n                  await transaction.wait()\n                  fetchGreeting()\n\n        }\n\n    }\n\n    async function sendCoins() {\n        if (typeof window.ethereum !== 'undefined') {\n                  await requestAccount()\n                  const provider = new ethers.providers.Web3Provider(window.ethereum);\n                  const signer = provider.getSigner();\n                  const contract = new ethers.Contract(tokenAddress, Token.abi, signer);\n                  const transaction = await contract.transfer(userAccount, amount);\n                  await transaction.wait();\n                  console.log(`${amount} Coins successfully sent to ${userAccount}`);\n\n        }\n\n    } */\n\n    return (\n        <div className=\"App\">\n            <EthLogo winners={winners} lossers={lossers} gamesPlayed={gamesPlayed} chartData={chartData} balance={balance} />\n            {/*\n                    <button onClick={fetchGreeting}>Fetch Greeting</button>\n                    <button onClick={setGreeting}>Set Greeting</button>\n                    <input onChange={e => setGreetingValue(e.target.value)} placeholder=\"Set greeting\" />\n\n                    <br />\n                    <button onClick={getBalance}>Get Balance</button>\n                <button onClick={sendCoins}>Send Coins</button>\n                <input onChange={e => setUserAccount(e.target.value)} placeholder=\"Account ID\" />\n                <input onChange={e => setAmount(e.target.value)} placeholder=\"Amount\" />\n\n             * */}\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}