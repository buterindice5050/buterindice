{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","a","window","ethereum","request","method","useEffect","confirm","requestAccount","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+OA6GeA,MApGf,WACM,MAAqCC,qBAArC,mBACA,GADA,UACsCA,sBAAtC,mBACA,GADA,UAC4BA,sBAA5B,mBAHS,4CAKX,sBAAAC,EAAA,sEACcC,OAAOC,SAASC,QAAQ,CAAEC,OAAQ,wBADhD,4CALW,sBA4EX,OAzEE,UAOFC,qBAAU,WAEN,IADcJ,OAAOK,QAAQ,kCAExB,OAAO,GAbL,mCAYGC,KAEX,IA+DK,qBAAKC,UAAU,MAAf,SACE,wBAAQA,UAAU,kBC3EjBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.97408285.chunk.js","sourcesContent":["import './App.css';\nimport { useState, useEffect } from 'react';\nimport { ethers  } from 'ethers'\n//import Greeter from './artifacts/contracts/Greeter.sol/Greeter.json'\n//import Token from './artifacts/contracts/Token.sol/Token.json'\n\n//const greeterAddress = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\"\n//const tokenAddress = \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\"\n\nfunction App() {\n      const [greeting, setGreetingValue] = useState()\n      const [userAccount, setUserAccount] = useState()\n      const [amount, setAmount] = useState()\n\n    async function requestAccount() {\n            await window.ethereum.request({ method: 'eth_requestAccounts'  });\n\n    }\n\n    useEffect(()=>{\n        const agree = window.confirm(\"WARNING: PLAY AT YOUR OWN RISK\")\n        if(agree) requestAccount()\n        else return false\n    }, [])\n\n /*   async function fetchGreeting() {\n        if (typeof window.ethereum !== 'undefined') {\n                  const provider = new ethers.providers.Web3Provider(window.ethereum)\n                  console.log({ provider  })\n                  const contract = new ethers.Contract(greeterAddress, Greeter.abi, provider)\n            try {\n                        const data = await contract.greet()\n                        console.log('data: ', data)\n\n            } catch (err) {\n                        console.log(\"Error: \", err)\n\n            }\n\n        }\n\n    }\n\n    async function getBalance() {\n        if (typeof window.ethereum !== 'undefined') {\n                  const [account] = await window.ethereum.request({ method: 'eth_requestAccounts'  })\n                  const provider = new ethers.providers.Web3Provider(window.ethereum);\n                  const contract = new ethers.Contract(tokenAddress, Token.abi, provider)\n                  const balance = await contract.balanceOf(account);\n                  console.log(\"Balance: \", balance.toString());\n\n        }\n\n    }\n\n    async function setGreeting() {\n            if (!greeting) return\n        if (typeof window.ethereum !== 'undefined') {\n                  await requestAccount()\n                  const provider = new ethers.providers.Web3Provider(window.ethereum);\n                  console.log({ provider  })\n                  const signer = provider.getSigner()\n                  const contract = new ethers.Contract(greeterAddress, Greeter.abi, signer)\n                  const transaction = await contract.setGreeting(greeting)\n                  await transaction.wait()\n                  fetchGreeting()\n\n        }\n\n    }\n\n    async function sendCoins() {\n        if (typeof window.ethereum !== 'undefined') {\n                  await requestAccount()\n                  const provider = new ethers.providers.Web3Provider(window.ethereum);\n                  const signer = provider.getSigner();\n                  const contract = new ethers.Contract(tokenAddress, Token.abi, signer);\n                  const transaction = await contract.transfer(userAccount, amount);\n                  await transaction.wait();\n                  console.log(`${amount} Coins successfully sent to ${userAccount}`);\n\n        }\n\n    } */\n\n    return (\n            <div className=\"App\">\n              <header className=\"App-header\">\n        {\n            /*\n        <button onClick={fetchGreeting}>Fetch Greeting</button>\n                <button onClick={setGreeting}>Set Greeting</button>\n                <input onChange={e => setGreetingValue(e.target.value)} placeholder=\"Set greeting\" />\n\n                <br />\n                <button onClick={getBalance}>Get Balance</button>\n                <button onClick={sendCoins}>Send Coins</button>\n                <input onChange={e => setUserAccount(e.target.value)} placeholder=\"Account ID\" />\n                <input onChange={e => setAmount(e.target.value)} placeholder=\"Amount\" />\n\n             * */\n        }\n              </header>\n            </div>\n\n    );\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}